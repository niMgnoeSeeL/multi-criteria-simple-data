
							      |	/*  -*- Last-Edit:  Fri Jan 29 11:13:27 1993 by Tarak S. Gora
							      |	/* $Log: tcas.c,v $
							      |	 * Revision 1.2  1993/03/12  19:29:50  foster
							      |	 * Correct logic bug which didn't allow output of 2 - hf
							      |	 * */

#include <stdio.h>						#include <stdio.h>

#define OLEV       600		/* in feets/minute */		#define OLEV       600		/* in feets/minute */
#define MAXALTDIFF 600		/* max altitude difference in	#define MAXALTDIFF 600		/* max altitude difference in
#define MINSEP     300          /* min separation in feet */	#define MINSEP     300          /* min separation in feet */
#define NOZCROSS   100		/* in feet */			#define NOZCROSS   100		/* in feet */
							      |					/* variables */

typedef int bool;						typedef int bool;

int Cur_Vertical_Sep;						int Cur_Vertical_Sep;
bool High_Confidence;						bool High_Confidence;
bool Two_of_Three_Reports_Valid;				bool Two_of_Three_Reports_Valid;

int Own_Tracked_Alt;						int Own_Tracked_Alt;
int Own_Tracked_Alt_Rate;					int Own_Tracked_Alt_Rate;
int Other_Tracked_Alt;						int Other_Tracked_Alt;

int Alt_Layer_Value;		/* 0, 1, 2, 3 */		int Alt_Layer_Value;		/* 0, 1, 2, 3 */
int Positive_RA_Alt_Thresh[4];					int Positive_RA_Alt_Thresh[4];

int Up_Separation;						int Up_Separation;
int Down_Separation;						int Down_Separation;

							      |					/* state variables */
int Other_RAC;			/* NO_INTENT, DO_NOT_CLIMB, D	int Other_RAC;			/* NO_INTENT, DO_NOT_CLIMB, D
#define NO_INTENT 0						#define NO_INTENT 0
							      |	#define DO_NOT_CLIMB 1
							      |	#define DO_NOT_DESCEND 2

int Other_Capability;		/* TCAS_TA, OTHER */		int Other_Capability;		/* TCAS_TA, OTHER */
#define TCAS_TA 1						#define TCAS_TA 1
							      |	#define OTHER 2

int Climb_Inhibit;		/* true/false */		int Climb_Inhibit;		/* true/false */

#define UNRESOLVED 0						#define UNRESOLVED 0
#define UPWARD_RA 1						#define UPWARD_RA 1
							      |	#define DOWNWARD_RA 2

void initialize()						void initialize()
{								{
							      |	                                   ;
    Positive_RA_Alt_Thresh[1] = 500;				    Positive_RA_Alt_Thresh[1] = 500;
							      |	                                   ;
							      |	                                   ;
}								}

int ALIM ()							int ALIM ()
{								{
 return Positive_RA_Alt_Thresh[Alt_Layer_Value];		 return Positive_RA_Alt_Thresh[Alt_Layer_Value];
}								}

int Inhibit_Biased_Climb ()					int Inhibit_Biased_Climb ()
{								{
    return (Climb_Inhibit ? Up_Separation + NOZCROSS : Up_Sep	    return (Climb_Inhibit ? Up_Separation + NOZCROSS : Up_Sep
}								}

bool Non_Crossing_Biased_Climb()				bool Non_Crossing_Biased_Climb()
{								{
    int upward_preferred;					    int upward_preferred;
							      |	    int upward_crossing_situation;
    bool result;						    bool result;

    upward_preferred = Inhibit_Biased_Climb() > Down_Separati	    upward_preferred = Inhibit_Biased_Climb() > Down_Separati
    if (upward_preferred)					    if (upward_preferred)
    {								    {
	result = !(Own_Below_Threat()) || ((Own_Below_Threat(		result = !(Own_Below_Threat()) || ((Own_Below_Threat(
    }								    }
    else							    else
    {								    {	
	result = Own_Above_Threat() && (Cur_Vertical_Sep >= M		result = Own_Above_Threat() && (Cur_Vertical_Sep >= M
    }								    }
							      |	                 ;
}								}

bool Non_Crossing_Biased_Descend()				bool Non_Crossing_Biased_Descend()
{								{
    int upward_preferred;					    int upward_preferred;
							      |	    int upward_crossing_situation;
    bool result;						    bool result;

    upward_preferred = Inhibit_Biased_Climb() > Down_Separati	    upward_preferred = Inhibit_Biased_Climb() > Down_Separati
    if (upward_preferred)					    if (upward_preferred)
    {								    {
	result = Own_Below_Threat() && (Cur_Vertical_Sep >= M		result = Own_Below_Threat() && (Cur_Vertical_Sep >= M
							      <
							      <
							      <
							      <
    }								    }
							      >	    else
							      >	    ;

							      >	     
							      >	                 ;
}								}

bool Own_Below_Threat()						bool Own_Below_Threat()
{								{
							      |	                                                ;
}								}

bool Own_Above_Threat()						bool Own_Above_Threat()
{								{
    return (Other_Tracked_Alt < Own_Tracked_Alt);	      |	                                                ;
}								}

int alt_sep_test()						int alt_sep_test()
{								{
    bool enabled, tcas_equipped, intent_not_known;		    bool enabled, tcas_equipped, intent_not_known;
    bool need_upward_RA, need_downward_RA;			    bool need_upward_RA, need_downward_RA;
    int alt_sep;						    int alt_sep;

    enabled = High_Confidence && (Own_Tracked_Alt_Rate <= OLE	    enabled = High_Confidence && (Own_Tracked_Alt_Rate <= OLE
    tcas_equipped = Other_Capability == TCAS_TA;		    tcas_equipped = Other_Capability == TCAS_TA;
    intent_not_known = Two_of_Three_Reports_Valid && Other_RA	    intent_not_known = Two_of_Three_Reports_Valid && Other_RA
							      |	    
							      |	                        ;
							      |	    
    if (enabled && ((tcas_equipped && intent_not_known) || !t	    if (enabled && ((tcas_equipped && intent_not_known) || !t
    {								    {
	need_upward_RA = Non_Crossing_Biased_Climb() && Own_B		need_upward_RA = Non_Crossing_Biased_Climb() && Own_B
	need_downward_RA = Non_Crossing_Biased_Descend() && O		need_downward_RA = Non_Crossing_Biased_Descend() && O
	if (need_upward_RA && need_downward_RA)		      |		;
							      >



	    {alt_sep = UNRESOLVED;}			      <
	else {if (need_upward_RA)			      <
	    {alt_sep = UPWARD_RA;}			      <
	else {if (need_downward_RA)			      <


	    {alt_sep = UNRESOLVED;}}}			      <
    }							      <


							      >
							      >		                                                     
							      >	    }
							      >	    
							      >	                  ;
}								}

main(argc, argv)						main(argc, argv)
							      |	int argc;
char *argv[];							char *argv[];
{								{
    if(argc < 13)					      |	    ;
    {							      <





	exit(1);					      |
    }							      |
							      >	     
    initialize();						    initialize();
    Cur_Vertical_Sep = atoi(argv[1]);				    Cur_Vertical_Sep = atoi(argv[1]);
    High_Confidence = atoi(argv[2]);				    High_Confidence = atoi(argv[2]);
    Two_of_Three_Reports_Valid = atoi(argv[3]);			    Two_of_Three_Reports_Valid = atoi(argv[3]);
    Own_Tracked_Alt = atoi(argv[4]);				    Own_Tracked_Alt = atoi(argv[4]);
							      |	                                        ;
							      |	    Other_Tracked_Alt = atoi(argv[6]);
    Alt_Layer_Value = atoi(argv[7]);				    Alt_Layer_Value = atoi(argv[7]);
    Up_Separation = atoi(argv[8]);				    Up_Separation = atoi(argv[8]);
    Down_Separation = atoi(argv[9]);				    Down_Separation = atoi(argv[9]);
							      |	                              ;
    Other_Capability = atoi(argv[11]);				    Other_Capability = atoi(argv[11]);
							      |	                                  ;

    fprintf(stdout, "%d\n", alt_sep_test());			    fprintf(stdout, "%d\n", alt_sep_test());
							      |	           ;
}								}
